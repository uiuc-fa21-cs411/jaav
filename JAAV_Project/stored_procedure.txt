--notes 
--run these these commands in order to get this to work on MySql terminal:
--delimiter //
--copy and paste everything belong 
--delimiter ; 
--finally, use "call find_destination();" to use the advanced query


--ideas: how do we want this to work?
  --return 1 short, 1 medium, 1 long trip?
  --return all short, all medium, or all long trips (adds a paramter)?


create procedure find_destination(IN user_lat  DECIMAL(15,5), IN user_long  DECIMAL(15,5))
begin
    DECLARE finished int default 0;    
    DECLARE short = 5;  --measured in degrees
    DECLARE medium = 10;
    DECLARE Distance VARCHAR(6) default "short";
    DECLARE park_name VARCHAR(255);
    DECLARE lat DECIMAL(15,5);
    DECLARE long DECIMAL(15,5);

    DECLARE park_cur CURSOR FOR select Parks.ParkName, Parks.Latitude, Parks.Longitude
        from Parks
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;
    
    --create intermediate table
    create table park_distance(
      ParkName VARCHAR(255),
      Relative_distance VARCHAR(6)
    )
    
    --use cursor to fill intermediate table
    open park_cur;
    
    fetch next from park_cur into park_name, lat, long;
    repeat
          IF (user_lat - lat <= short AND user_long - long <= short) THEN SET Distance = "Short";
        ELSEIF (user_lat - lat <= medium AND user_long - long <= medium) THEN SET Distance = "Medium";
        ELSEIF (user_lat - lat > medium AND user_long - long > medium) THEN SET Distance = "Long";
        END IF;


        insert into park_distance values (park_name, Distance);
        fetch next from park_cur into park_name, lat, long;
    until finished
    end repeat;
    
    close park_cur;

    --create final table 
    create table TripPlan (
        ParkName VARCHAR(255),
        Distance VARCHAR(6),
        CampsiteName VARCHAR(255),
        CampsitePrice DECIMAL(15,5),
        TrailName VARCHAR(255)
    );

  select ParkName, TrailName, max(Popularity) 
    from Trails natural join Parks
    group by Trails.ParkName;

  select ParkName, CampsiteName, min(Price)
    from Parks natural join Campsites
    group by Campsites.ParkName;
    
    select *
    from TripPlan
    order by TripPlan.Distance;

end;